---
namespace: vault

vault:
  defines: runnable
  metadata:
    name: Vault
    shortname: Vault
    description: |
      HashiCorp Vault is a highly secure and scalable secrets management solution that enables organizations to store, manage, and control access to sensitive data such as passwords, API keys, and certificates.

      It provides a centralized platform for managing secrets across multiple environments and applications, with robust access control policies and auditing capabilities. Vault offers a variety of authentication  methods, including LDAP, Active Directory, and multi-factor authentication, to ensure that only authorized users can access sensitive data.

      It also supports dynamic secrets, which are generated on-demand and automatically revoked after a specified time period, further enhancing security. With its flexible architecture and extensive API, Vault can be easily integrated into existing workflows and toolchains, making it
      an essential tool for modern DevOps teams.
    website: https://www.vaultproject.io
    publisher: monk.io
    source: https://github.com/hashicorp/vault
    tags: Druid,Kafka,Database,Analytics,Streaming,Real-Time,Real Time,Apache,Open Source
    icon: https://www.hashicorp.com/_next/static/media/colorwhite.c5723175.svg
  variables:
    monk_vault_port:
      value: 8201
      type: string
    monk_image_tag:
      value: latest
    monk_vault_addr:
      env: VAULT_ADDR
      value: <- `http://localhost:${monk_vault_port}`
      type: string
    monk_vault_api_addr:
      env: VAULT_API_ADDR
      value: <- `http://0.0.0.0:${monk_vault_port}`
      type: string
    monk_skip_setcap:
      env: SKIP_SETCAP
      value: false
    monk_skip_chown:
      env: SKIP_CHOWN
      value: false
  containers:
    vault:
      image: vault
      image-tag: <- `${monk_image_tag}`
      bash: vault server --config /vault/config/config.json
  files:
    config_file:
      container: vault
      mode: 0644
      path: /vault/config/config.json
      contents: |
        {
          "storage": {
            "file": {
              "path": "vault/file"
            }
          },
          "listener": {
            "tcp": {
              "address": "0.0.0.0:{{ v "monk_vault_port"}}",
              "tls_disable": true
            }
          },
          "ui": true,
          "max_lease_ttl": "8760h",
          "default_lease_ttl": "8760h",
          "disable_mlock": true
        }
    unlock_file:
      container: vault
      mode: 0775
      path: /vault/unlock.sh
      contents: |
        #!/usr/bin/env sh
        set -ex
        vault operator init > /vault/file/keys
        vault operator unseal $(grep 'Unseal Key 1:' /vault/file/keys | awk '{print $NF}')
        vault operator unseal $(grep 'Unseal Key 2:' /vault/file/keys | awk '{print $NF}')
        vault operator unseal $(grep 'Unseal Key 3:' /vault/file/keys | awk '{print $NF}')
        export ROOT_TOKEN=$(grep 'Initial Root Token:' /vault/file/keys | awk '{print $NF}')
        vault login $ROOT_TOKEN
        show_token() {
          print $(grep 'Initial Root Token:' /vault/file/keys | awk '{print $NF}')
        }
    show_token_file:
      container: vault
      mode: 0775
      path: /vault/show_token_file.sh
      contents: |
        #!/usr/bin/env sh
        set -ex
        echo $(grep 'Initial Root Token:' /vault/file/keys | awk '{print $NF}')
  actions:
    unlock:
      code: exec("vault", "/bin/sh", "/vault/unlock.sh")
      description: Vault Unlock Login
    show_token:
      code: exec("vault", "/bin/sh", "/vault/show_token_file.sh")
      description: Vault Show token
  services:
    vault-svc:
      container: vault
      port: <- `${monk_vault_port}`
      protocol: tcp
      host-port: <- `${monk_vault_port}`
